#! usr/bin/python

# This script will obtain the list of all the sorted shuffles and check the line no or the rank of the shuffle that matches the order in the original reference operon

import os
import sys
import pdb

def open_file(name_file, open_status = 'r'):
    """ This function just opens the file for reading and returns back the file handle for the file. If the file cannot be opened it just exits! It can open and read any type of files. It can also return back the file handle for writing. The default status for opening is to read the file. Note that the file handle is and must be closed in the place from where this function was called """

    #Opening and reading/writing the passed file_name """
    try:
	file = open(name_file,open_status)
    except IOError,err:	# If the file cannot be opened i am exiting
	print "File %s cannot be opened : %s "%(name_file,err.strerror)
	sys.exit(0)

    return file




def get_operons(file_name):
    """
    @param file_name: This is the file name which contains a list of all genes, its details and its membership to operons. The file was generated by joining three tables in sql database
    @function: It parses the file to generate a non redundant list of all operons. 
    @return: List of all operons (non-redundant)
    """
    ifile = open_file(file_name)
    lines = ifile.readlines()
    ifile.close()
    redundant_operon_list =([line.split('\t')[0] for line in lines]) 
    operon_list = set(redundant_operon_list)
    
    return operon_list


def get_genes(query_operon):
    """ 
    @param_input: query_operon: name of the operon in ecoli
    @parm_output: bsub_genes_information: the name of the genes of bsub that has the operon. The [[locus_tag, rank, gene_id, orientation, left_end, right_end, group_id],[..],..]
    group_order: [group1, group2, ...]
    @function: Looks up the text file - bsub_data.txt to obtain information of all bsub genes that match the operon description
    """

    #Initializing
    bsub_genes_information = []
    group_order = []
    orientation_status = ''
    
    #ifile = open_file('ecoli_cluster.txt')
    #ifile = open_file('bsub_data.txt')
    ifile = open_file('ecoli_homolog_data.txt')
    lines = ifile.readlines()
    ifile.close()

    for line in lines:
	if query_operon == line.split('\t')[0]:
	    split_line = line.split('\t')
	    [locus_tag, rank, orientation, left_end, right_end, group_id] = split_line[1], split_line[3], split_line[4], split_line[5], split_line[6], split_line[7][:-1]	#Note-[:-1] added only when group_id is the last entry
	    orientation_status = orientation
	    
	    bsub_genes_information.append([locus_tag, rank, orientation, left_end, right_end, group_id])
	    group_order.append(group_id)
	    
    return bsub_genes_information, group_order, orientation_status

def get_rank_order(ref_group_order, operon):
    
    mod_list = []
    shuffled_dir = os.getcwd() + '/ecoli_homolog_shuffled/'
    file_name = shuffled_dir + operon + '_shuffled.sort'
    try:
	ifile = open(file_name,'r')
    except IOError:	#The file may not have been created at all. Maybe still simulating or it will be greater than 8 genes long
	return 0
    lines = ifile.readlines()
    list_group_order = [eval(line.split('\t')[0]) for line in lines]
    for ordering in list_group_order:
	new_list = []
	for grp in ordering:
	    new_list.append(grp)
	mod_list.append(new_list)

    pos = mod_list.index(ref_group_order)
    
    return pos + 1	#Because the 1st index is 0
    

def main(argument):
    
    #[argv] = argument
    all_ref_ranks = []
    
    # (1) Get a list of all the operons
    file_name = 'ecoli_homolog_data.txt'
    #file_name = 'bsub_data.txt'	#For B.subtilis operons
    operon_list = get_operons(file_name)
    
    # (2) All the shuffled and sorted operon list is in the directory - ecoli_homolog_shuffled (for ecoli_homolog) or bacillus_shuffled for B.subtilis operons
    # Iterate through the operon list and for each operon gets its sorted shuffle
    for operon in operon_list:
	# For an operon get its group order. 
	genes, ref_group_order, orientation_status = get_genes(operon)
	
	if len(ref_group_order) > 1:
	    print operon
	    # (3) Reverse group order if the orientation is reverse
	    if orientation_status == 'reverse':
		ref_group_order.reverse()

	    # (4) Open the file [operon_name]_shuffled.sort. Get a list of all the shuffles which have already been sorted. Get the index of the ref_group_order in the list
	    
	    rank_ref_order = get_rank_order(ref_group_order, operon)
	    print rank_ref_order, ref_group_order, operon
	    
	    # (5) Make a bigger list of all these ranks and the operons etc associated with it
	    all_ref_ranks.append([rank_ref_order,ref_group_order, operon])

    filtered_ref_ranks = [item for item in all_ref_ranks if not item[0] == 0]	# The 0 was actually an error and not possible otherwise
    first_rankers = [item for item in filtered_ref_ranks if item[0] == 1]
    greater_rankers = [item for item in filtered_ref_ranks if not item[0] == 1]
    
    print "Number of Ranks computed (after shuffling) : %d"%(len(filtered_ref_ranks))
    print "Number of Group orders with rank 1 : %d"%(len(first_rankers))
    print "Number of Group orders not with rank 1 : %d"%(len(greater_rankers))
    
    # Write the rankers onto file
    ofile = open('ecoli_homolog_first_rankers.txt','w')
    for rank, ref_group_order, operon in first_rankers:
	ofile.write(str(rank) + '\t' + str(ref_group_order) + '\t' + str(operon) + '\n')
    ofile.close()
    
    ofile = open('ecoli_homolog_greater_rankers.txt','w')
    for rank, ref_group_order, operon in greater_rankers:
	ofile.write(str(rank) + '\t' + str(ref_group_order) + '\t' + str(operon) + '\n')
    ofile.close()
    
    

    
if __name__ == '__main__':
    
    argument = sys.argv[1:]

    
    print "Processing %s ..."%(argument)
    main(argument)    
    
    
    
    import time
    print "Script - ranking_shuffled_operons.py %s \t Completed \t %s"%(argument, time.strftime("%d %b %Y %H:%M:%S",time.localtime()))
    