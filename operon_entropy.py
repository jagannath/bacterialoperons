#! usr/bin/python

# This programme aims to calculate the entropy of Ecoli operons. -(Sum of fgoc*logfgoc) across all pairwise combinations of the gene pairs within the operons. 

from __future__ import division
import os
import sys
try:
   import cPickle as pickle
except:
   import pickle
import shelve
import re
import itertools
import math
import numpy as np
import pylab as p
import matplotlib


def pickle_file(file_name, contents, path_dir=os.getcwd()):
    """
    @param file_name: This is the file name to which the contents must be dumped
    @param contents: This is the contents to be pickled
    @function: The contents passed are pickled to the file in the pkl_directory
    """
    #pkl_dir = os.getcwd() + '/pkl_files/'
    pkl_dir = path_dir + '/pkl_files/'
    pkl_file = pkl_dir + file_name
    ofile = open(pkl_file,'wb')
    pickle.dump(contents, ofile)
    ofile.close()
    
    return True

def unpickle_file(file_name,path_dir=os.getcwd()):
    """
    @param file_name: This is the file name to which the contents must be dumped
    @param contents: This is the contents to be pickled
    @function: The contents passed are pickled to the file in the pkl_directory
    """
    pkl_dir = path_dir + '/pkl_files/'
    pkl_file = pkl_dir + file_name
    ifile = open(pkl_file)
    contents = pickle.load(ifile)
    ifile.close()
    
    return contents


def get_operons(file_name):
    """
    @param file_name: This is the file name which contains a list of all genes, its details and its membership to operons. The file was generated by joining three tables in sql database
    @function: It parses the file to generate a non redundant list of all operons. 
    @return: List of all operons (non-redundant)
    """
    ifile = open(file_name)
    lines = ifile.readlines()
    ifile.close()
    redundant_operon_list =([line.split('\t')[0] for line in lines]) 
    operon_list = set(redundant_operon_list)
    
    return operon_list

def get_genes(query_operon):
    """ 
    @param_input: query_operon: name of the operon in ecoli
    @parm_output: bsub_genes_information: the name of the genes of bsub that has the operon. The [[locus_tag, rank, gene_id, orientation, left_end, right_end, group_id],[..],..]
    group_order: [group1, group2, ...]
    @function: Looks up the text file - bsub_data.txt to obtain information of all bsub genes that match the operon description
    """

    #Initializing
    gene_information = []
    group_order = []
    orientation_status = ''
    
    #ifile = open_file('ecoli_cluster.txt')
    #ifile = open_file('bsub_data.txt')
    ifile = open('ecoli_homolog_data.txt')
    lines = ifile.readlines()
    ifile.close()

    for line in lines:
	if query_operon == line.split('\t')[0]:
	    split_line = line.split('\t')
	    [locus_tag, rank, orientation, left_end, right_end, group_id] = split_line[1], split_line[3], split_line[4], split_line[5], split_line[6], split_line[7][:-1]	#Note-[:-1] added only when group_id is the last entry
	    orientation_status = orientation
	    
	    gene_information.append([locus_tag, rank, orientation, left_end, right_end, group_id])
	    group_order.append(group_id)
	    
    return gene_information, group_order, orientation_status

def calc_entropy(permutation_list,fgoc_dict):
    """
    @param permutation_list: This calculates the entropy of the permutation_list
    @function: Calculates the entropy of the fgoc_scores by using the values of the pair from the fgoc_dict. The formula is sum of (fgoc)*log(fgoc)
    """
    sum_score = 0
    for pair in permutation_list:
	bnbr_pair = pair[0] + '|' + pair[1]
	try:
	    fgoc_score = fgoc_dict[bnbr_pair]
	except KeyError:	#Because there is no score assigned to this pair
	    fgoc_score = 1
	score = fgoc_score * math.log10(fgoc_score)
	sum_score += score

    return sum_score
	   


def main(argument):
    [argv] = argument
    
    if argv == '0':
	# This part makes a dictionary of b_number1|b_number2 = fgoc_score. Pickle the dictionary
	file_name = os.getcwd() + '/directed_fgoc_ecoli_ko/' + 'directed_fgoc_ecoli_ko.mclinput'
	ifile = open(file_name)
	lines = ifile.readlines()
	ifile.close()
	# Making a dictionary
	bnbr_pair_fgoc_dict = {}
	count = 0
	for line in lines:
	    try:
		bnbr1,bnbr2,fgoc_score = line.split('\t')[0], line.split('\t')[1], line.split('\t')[2]
		bnbr_pair = bnbr1 + '|' + bnbr2
		fgoc_score = float(fgoc_score)
		#print bnbr_pair, fgoc_score
		bnbr_pair_fgoc_dict[bnbr_pair] = fgoc_score
	    except IndexError:
		pass
	# Pickling the dictionary
	file_name = 'bnbr_pair_ko_fgoc_dict.pkl'
	pickle_file(file_name,bnbr_pair_fgoc_dict)
	
    if argv == '1':
	# This part gets the list of all operons in the ecoli geneome (script written and verified many times before)
	# (0) Unpickles the bnbr_pair: fgoc_score dictionary
	file_name = 'bnbr_pair_ko_fgoc_dict.pkl'
	bnbr_pair_fgoc_dict = unpickle_file(file_name)
	# (1) Get list of operons
	file_name = 'ecoli_cluster.txt'
	operon_list = get_operons(file_name)
	all_op_ent = []
	all_norm_op_ent = []
	# (2) Get groups for each operon (>1)
	for operon in operon_list:
	    gene_information,group_order, orientation_status = get_genes(operon)
	    gene_order = [item[6:] for item in group_order]
	    # Obtain operons (>1 gene)
	    if len(gene_order) > 1:
		# Orientation_status doesnt matter at all. The permutation_list computes all possible pairings
		# Use itemgetter to obtain a set containing all possible gene pairs
		permutation_list = list(itertools.permutations(gene_order,2))
		op_entropy = -calc_entropy(permutation_list,bnbr_pair_fgoc_dict)
		norm_op_entropy = op_entropy/len(gene_order)
		#print operon, orientation_status, op_entropy, norm_op_entropy
		if norm_op_entropy < 0.1:
		    print operon
		    
		if not op_entropy == 0: 
		    all_op_ent.append(op_entropy)
		    all_norm_op_ent.append(norm_op_entropy)
	print len(all_op_ent)

	# Drawing the histogram
	#bins = 500
	#fig = p.figure(figsize=(15,15))
	#ax = fig.add_subplot(1,1,1)
	#n,bins,patches = p.hist(all_norm_op_ent,bins,color='g')
	#p.xlabel('Entropy of E.coli operons (fgoc score from Kegg cluster)')
	#p.ylabel('frequency')
	#p.title('Histogram of Normalised (Entropy/#genes) Information content of E.coli operons')
	##ax2 = p.axes([.5, .5, .3, .3])
	##p.title('Histogram excluding zero')
	###ax2 = fig.add_subplot(0.65,0.6,0.2)
	##n,bins,patches = p.hist(cutofflist,bins,color='b')
	##p.setp(ax2)
	#fig_dir = os.getcwd() + '/figures/'
	#fig_name = fig_dir + 'ecoli_norm_fgoc_entropy_within_operon_ver1.png'
	#p.savefig(fig_name,format = "png", orientation='landscape')
	##p.show()
		
if __name__ == '__main__':
    
    argument = sys.argv[1:]
    
    print "Processing %s ..."%(argument)
    main(argument)
    
    import time
    print "Script - operon_entropy.py %s \t Completed \t %s"%(argument, time.strftime("%d %b %Y %H:%M:%S",time.localtime()))